stages:
  - build
  - test
  - deploy


# build:rosette:
#   stage: build
#   image: nixos/nix
#   script:
#     - cd rosette
#     - nix-build
#     - ./run.sh rbl/rosette/tests/simple_add.rbl


build:p2p-test-network:
  stage: build
  image: docker:stable
  #image: ubuntu:xenial 

  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  variables:
    DOCKER_DRIVER: overlay2

  services:
  - docker:dind

  before_script:
      #- ./scripts/install_docker.sh 
  - docker info

  script:
    #- ./scripts/install_deps_ubuntu1604.sh 
    #- sudo apt-get -yq install python3-minimal python3-pexpect python3-pip
    #- apt-get -yq install sudo
    - apk update 
    - apk add git 
    - apk add sudo
    - apk add bash 
    - apk add cabal 
    - apk add ghc 
    - cabal update
    - cabal install --global mtl
    - cabal install --global alex happy
      #- cabal install alex happy mtl
    - apk add g++ cmake make automake autoconf libtool
    - apk add flex 
    - apk add rpm 
    - apk add fakeroot 
    - apk add openjdk8
    - export JAVA_HOME="/usr/lib/jvm/java-1.8-openjdk"
    - apk add python3 
    - apk add sbt --update-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing 
    - sudo pip3 install argparse docker pexpect
    - ./scripts/install_secp.sh
    - ./scripts/install_sodium.sh
    - ./scripts/install_bnfc.sh
    - ./scripts/p2p-test-network.sh

      # - apk add jflex 
      # - echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
      #apk add cherokee --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted

      #- apk add g++ 
      #apk add --update alpine-sdk
      #- apk add autoconf libtool #?no need for libtool secp
  # build:test_artifact_creation:
  #   stage: build 
  #   image: ubuntu:xenial 
  #   script:
  #     - ./scripts/install_deps_ubuntu1604.sh 
  #     - sbt -Dsbt.log.noformat=true clean rholang/bnfc:generate node/debian:packageBin node/rpm:packageBin node/universal:packageZipTarball
  # 
  # build:core:
  #   stage: build
  #   image: ubuntu:xenial 
  #   script:
  #     - ./scripts/install_deps_ubuntu1604.sh 
  #     - ./scripts/build_core.sh
  # 
  # deploy:
  #   stage: deploy
  #   artifacts:
  #     paths:
  #     - public
  #   only:
  #   - master
  #   - dev
  #   script:
  #   - sbt -Dsbt.log.noformat=true clean rholang/bnfc:generate node/debian:packageBin node/rpm:packageBin node/universal:packageZipTarball 
