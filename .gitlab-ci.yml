stages:
  - build
  - test
  - deploy

variables:
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/sbtboot -Dsbt.boot.directory=sbt-cache/boot -Dsbt.ivy.home=sbt-cache/ivy"
  COURSIER_CACHE: sbt-cache/coursier #only needed if you use coursier

# 1, 2, 3, 4, work, f
cache:
    # key: "$CI_BUILD_REF_NAME" # contains either the branch or the tag, so it's caching per branch
  key: "test1" # contains either the branch or the tag, so it's caching per branch
  untracked: true
  paths:
    - "sbt-cache/ivy/cache"
    - "sbt-cache/boot"
    - "sbt-cache/sbtboot"
    - "sbt-cache/target"
    - "sbt-cache/coursier" #only needed if you use coursier

# variables:
#   SBT_VERSION: "1.1.5"
#   SBT_OPTS: "-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/.boot -Dsbt.ivy.home=sbt-cache/.ivy"
# 
# cache:
#   key: "$CI_BUILD_REF_NAME" # contains either the branch or the tag, so it's caching per branch
#   untracked: true
#   paths:
#     - "sbt-cache/.ivy.cache"
#     - "sbt-cache/.boot"
#     - "sbt-cache/.sbtboot"
#     - "sbt-cache/target"



# build:rosette:
#   stage: build
#   image: nixos/nix
#   script:
#     - cd rosette
#     - nix-build
#     - ./run.sh rbl/rosette/tests/simple_add.rbl
#   tags:
#     - docker


# build:p2p-test-network-alpine37:
#   stage: build
#   # tags:
#   #   - docker 
#   tags:
#     - alpine37
#   # image: docker:stable
#   #image: alpine:latest
#   # variables:
#   #   DOCKER_DRIVER: overlay2
#   #   one
# 
#   # services:
#   #   - docker:dind
# 
#   before_script:
#     - apk update 
#     - apk add bash 
#   #    - apk update 
#   # #    - docker info
#   # test1
# 
#   script:
#     - export JAVA_HOME="/usr/lib/jvm/java-1.8-openjdk"
#     - apk update
#     - apk add bash
#     - ./scripts/alpine37_install_deps.sh
#     - ./scripts/install_secp.sh
#     - ./scripts/install_sodium.sh
#     - ./scripts/install_bnfc.sh
#     - sbt -Dsbt.log.noformat=true clean rholang/bnfc:generate node/docker
#       #- ./scripts/p2p-test-network.sh local && ./scripts/p2p-test-network.sh run-tests 50
#     - ./scripts/p2p-test-network.py -b

 
build:p2p-test-network-ubuntu-preloaded:
  stage: build
  # tags:
  #   - docker 
  tags:
      #- preloaded-ubuntu1604 
    - preloaded-ubuntu1804 
  # image: docker:stable
  #image: alpine:latest
  # variables:
  #   DOCKER_DRIVER: overlay2

  # services:
  #   - docker:dind

  # before_script:
  # #    - apk update 
  # #    - docker info
  #   - docker ps

  script:
      #- export JAVA_HOME="/usr/lib/jvm/java-1.8-openjdk"
      #- apk update
      #- apk add bash
      # - ./scripts/alpine37_install_deps.sh
      # - ./scripts/install_secp.sh
      # - ./scripts/install_sodium.sh
    - ./scripts/install_bnfc.sh
    - sudo apt-get update
    - sudo apt-get install sbt
    - sudo sbt -Dsbt.log.noformat=true clean rholang/bnfc:generate node/docker
      #- ./scripts/p2p-test-network.sh local && ./scripts/p2p-test-network.sh run-tests 50
    - sudo python3.6 -m pip install argparse docker pexpect requests
    - sudo ./scripts/p2p-test-tool.py -b -p 1
  # build:ubuntu1604-p2p-test-network:
  #   stage: build
  #   tags:
  #     - preloaded-ubuntu1604
  #   # tags:
  #   #   - docker
  #   # image: ubuntu:16.04
  # 
  #   script:
  #       # - ./scripts/ubuntu1604_install_deps.sh
  #     - ./scripts/install_secp.sh
  #     - ./scripts/install_sodium.sh
  #     - ./scripts/install_bnfc.sh
  #     - sudo pip3.6 install argparse docker pexpect
  #       # - sbt -Dsbt.log.noformat=true clean rholang/bnfc:generate node/docker
  #       #- ./scripts/p2p-test-network.sh local && ./scripts/p2p-test-network.sh run-tests 50
  #     - sudo sbt -Dsbt.log.noformat=true clean rholang/bnfc:generate node/docker
  #     - sudo ./scripts/p2p-test-network.py -b

  # build:p2p-test-network-ubuntu-preloaded:
  #   stage: build
  #   # tags:
  #   #   - docker 
  #   tags:
  #     - preloaded-ubuntu1604 
  #   script:
  #     sbt -Dsbt.log.noformat=true clean rholang/bnfc:generate coverage test coverageReport 
